{"version":3,"sources":["bll/reducer.ts","Button.tsx","Settings.tsx","Counter.tsx","App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx"],"names":["ACTIONS_TYPE","BUTTONS_TITLES","MESSAGES","Button","props","disabled","onClick","execFunc","title","Settings","className","maxValueTitle","type","value","maxValue","onChange","e","changeMaxValue","currentTarget","valueAsNumber","startValueTitle","startValue","changeStartValue","initialState","errorValue","setButton","counter","incButton","resetButton","reducer","state","action","CHANGE_MAX_VALUE","ERROR_MESSAGE","SETTINGS_MESSAGE","CHANGE_START_VALUE","SET_BUTTON","SET_COUNTER","SET_INC_BUTTON","changeMaxValueAC","changeStartValueAC","setCounterAC","Counter","console","log","error","App","useSelector","counterState","dispatch","useDispatch","useEffect","min","localStorage","getItem","max","MAX_VALUE_TITLE","START_VALUE_TITLE","SET_TITLE","setSettingButtonAC","setItem","toString","minValue","INC_TITLE","RESET_TITLE","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","createStore","composeWithDevTools","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.352437da.chunk.js","sourcesContent":["export enum ACTIONS_TYPE {\r\n    CHANGE_MAX_VALUE = 'Counter/CHANGE_MAX_VALUE',\r\n    CHANGE_START_VALUE = 'Counter/CHANGE_MIN_VALUE',\r\n    SET_COUNTER = 'Counter/SET_COUNTER',\r\n    SET_INC_BUTTON = 'Counter/SET_INC_BUTTON',\r\n    SET_BUTTON = 'Counter/SET_BUTTON'\r\n}\r\n\r\nexport enum BUTTONS_TITLES {\r\n    MAX_VALUE_TITLE = 'max-value',\r\n    START_VALUE_TITLE = 'start-value',\r\n    SET_TITLE = 'set',\r\n    INC_TITLE = 'inc',\r\n    RESET_TITLE = 'reset'\r\n}\r\n\r\nexport enum MESSAGES {\r\n    SETTINGS_MESSAGE = 'Enter values and press SET',\r\n    ERROR_MESSAGE = 'Incorrect Value!'\r\n}\r\n\r\nconst initialState = {\r\n    errorValue: '',\r\n    maxValue: 5,\r\n    startValue: 0,\r\n    setButton: true,\r\n    counter: 0,\r\n    incButton: true,\r\n    resetButton: true\r\n}\r\n\r\nexport type StateType = typeof initialState\r\n\r\nconst reducer = (state = initialState, action: ActionsType): StateType => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.CHANGE_MAX_VALUE: {\r\n            return  action.maxValue <= state.startValue ?\r\n                {\r\n                    ...state,\r\n                    errorValue: MESSAGES.ERROR_MESSAGE,\r\n                    setButton: false,\r\n                    maxValue: action.maxValue\r\n                } :\r\n                {\r\n                    ...state,\r\n                    errorValue: MESSAGES.SETTINGS_MESSAGE,\r\n                    setButton: false,\r\n                    maxValue: action.maxValue\r\n                }\r\n        }\r\n        case ACTIONS_TYPE.CHANGE_START_VALUE: {\r\n           return action.startValue < 0 || action.startValue >= state.maxValue ?\r\n           {\r\n                    ...state,\r\n                    errorValue: MESSAGES.ERROR_MESSAGE,\r\n                    setButton: false,\r\n                    startValue: action.startValue\r\n                } :\r\n               {\r\n                    ...state,\r\n                    errorValue: MESSAGES.SETTINGS_MESSAGE,\r\n                    setButton: false,\r\n                    startValue: action.startValue\r\n                }\r\n        }\r\n\r\n        case ACTIONS_TYPE.SET_BUTTON: {\r\n            return {\r\n                ...state,\r\n                errorValue: action.errorValue,\r\n                setButton: action.setButton,\r\n                counter: action.startValue,\r\n                incButton: action.incButton,\r\n                resetButton: action.resetButton\r\n            }\r\n        }\r\n\r\n        case ACTIONS_TYPE.SET_COUNTER: {\r\n            return state.maxValue < action.value ?\r\n                {\r\n                    ...state,\r\n                    incButton: true\r\n                }:\r\n                {\r\n                ...state,\r\n                counter: action.value,\r\n            }\r\n        }\r\n\r\n        case ACTIONS_TYPE.SET_INC_BUTTON: {\r\n            return {\r\n                ...state,\r\n                incButton: false\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default reducer\r\n\r\ntype ActionsType =\r\n    ReturnType<typeof changeMaxValueAC> |\r\n    ReturnType<typeof changeStartValueAC> |\r\n    ReturnType<typeof setCounterAC> |\r\n    ReturnType<typeof setSettingButtonAC> |\r\n    ReturnType<typeof setIncButtonAC>\r\n\r\n\r\nexport const changeMaxValueAC = (maxValue: number) => {\r\n    return {\r\n        type: ACTIONS_TYPE.CHANGE_MAX_VALUE,\r\n        maxValue\r\n    } as const\r\n}\r\nexport const changeStartValueAC = (startValue: number) => {\r\n    return {\r\n        type: ACTIONS_TYPE.CHANGE_START_VALUE,\r\n        startValue\r\n    } as const\r\n}\r\n\r\nexport const setCounterAC = (value: number) => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_COUNTER,\r\n        value\r\n    } as const\r\n}\r\nexport const setIncButtonAC = (value: boolean) => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_INC_BUTTON,\r\n        value\r\n    } as const\r\n}\r\n\r\nexport const setSettingButtonAC = (errorValue: string, setButton: boolean, startValue: number, incButton: boolean, resetButton: boolean) => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_BUTTON,\r\n        errorValue,\r\n        setButton,\r\n        startValue,\r\n        incButton,\r\n        resetButton\r\n    } as const\r\n}\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\n\ntype PropsType = {\n    title: string\n    disabled: boolean\n    execFunc: () => void\n}\n\nexport const Button = (props: PropsType) => {\n    return (\n        <div>\n            <button disabled={props.disabled}\n                    onClick={() => {\n                        props.execFunc()\n                    }}\n            >{props.title}</button>\n        </div>\n    );\n}\n","import React from 'react';\nimport {ChangeEvent} from 'react';\nimport './App.css';\n\ntype PropsType = {\n    maxValueTitle: string\n    startValueTitle: string\n    maxValue: number\n    startValue: number\n    changeMaxValue: (value: number) => void\n    changeStartValue: (value: number) => void\n}\n\nexport const Settings = (props: PropsType) => {\n\n    const setMaxValue = (e: ChangeEvent<HTMLInputElement>) => props.changeMaxValue(e.currentTarget.valueAsNumber)\n    const setMinValue = (e: ChangeEvent<HTMLInputElement>) => props.changeStartValue(+e.currentTarget.valueAsNumber)\n\n    return (\n        <div className=\"settings\">\n            <div className={\"maxValue\"}>\n                <span> {props.maxValueTitle} </span>\n                <input type=\"number\" value={props.maxValue}\n                       onChange={setMaxValue}\n                />\n            </div>\n            <div className={\"startValue\"}>\n                <span>{props.startValueTitle} </span>\n                <input type=\"number\" value={props.startValue}\n                       onChange={setMinValue}\n                />\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport './App.css';\nimport {MESSAGES} from \"./bll/reducer\";\n\ntype PropsType = {\n    counter: number\n    minValue: number\n    maxValue: number\n    error: string\n}\n\nexport const Counter = (props:PropsType) => {\n    console.log(props.error)\n    return (\n        <div className=\"counter\">\n            {props.error === MESSAGES.SETTINGS_MESSAGE ?\n                <h3 className={'default'}>{MESSAGES.SETTINGS_MESSAGE}</h3> :\n                props.error === MESSAGES.ERROR_MESSAGE ?\n                    <h3 className={'error'}>{MESSAGES.ERROR_MESSAGE}</h3> :\n                    <h3 className={props.counter === props.maxValue ? 'maxNumber' : 'defaultNumber'}>{props.counter}</h3>}\n        </div>\n    );\n}","import React, {useEffect} from 'react';\nimport './App.css';\nimport {Button} from './Button';\nimport {Settings} from \"./Settings\";\nimport {Counter} from \"./Counter\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    BUTTONS_TITLES,\n    changeMaxValueAC,\n    changeStartValueAC,\n    setCounterAC, setIncButtonAC, setSettingButtonAC\n} from \"./bll/reducer\";\nimport {AppStoreType} from \"./bll/store\";\n\nexport const App = () => {\n    let errorValue = useSelector<AppStoreType, string>(state => state.counterState.errorValue)\n    let startValue = useSelector<AppStoreType, number>(state => state.counterState.startValue)\n    let maxValue = useSelector<AppStoreType, number>(state => state.counterState.maxValue)\n    let setButton = useSelector<AppStoreType, boolean>(state => state.counterState.setButton)\n    let counter = useSelector<AppStoreType, number>(state => state.counterState.counter)\n    let incButton = useSelector<AppStoreType, boolean>(state => state.counterState.incButton)\n    let resetButton = useSelector<AppStoreType, boolean>(state => state.counterState.resetButton)\n\n    const dispatch = useDispatch()\n\n    // Using hook useEffect for getting data from local storage\n    useEffect(() => {\n        let min = localStorage.getItem('minValue')\n        let max = localStorage.getItem('maxValue')\n        if (min && max) {\n            dispatch(changeStartValueAC(+min))\n            dispatch(changeMaxValueAC(+max))\n        }\n    }, [])\n\n    const changeMaxValue = (maxValue: number) => {\n        dispatch(changeMaxValueAC(maxValue))\n    }\n\n    const changeStartValue = (startValue: number) => {\n        dispatch(changeStartValueAC(startValue))\n    }\n\n    const onSetButtonClick = () => {\n        dispatch(setSettingButtonAC('', true, startValue, false, false))\n        // Setting data into local storage\n        localStorage.setItem('minValue', startValue.toString())\n        localStorage.setItem('maxValue', maxValue.toString())\n    }\n\n    const onIncButtonClick = () => {\n        counter = counter + 1\n        dispatch(setCounterAC(counter))\n    }\n\n    const onResetButtonClick = () => {\n        dispatch(setCounterAC(startValue))\n        dispatch(setIncButtonAC(false))\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"settingsBlock\">\n                <Settings maxValueTitle={BUTTONS_TITLES.MAX_VALUE_TITLE}\n                          startValueTitle={BUTTONS_TITLES.START_VALUE_TITLE}\n                          maxValue={maxValue}\n                          startValue={startValue}\n                          changeMaxValue={changeMaxValue}\n                          changeStartValue={changeStartValue}\n                />\n                <div className=\"buttons\">\n                    <Button title={BUTTONS_TITLES.SET_TITLE}\n                            disabled={setButton}\n                            execFunc={onSetButtonClick}\n                    />\n                </div>\n            </div>\n            <div className=\"counterBlock\">\n                <Counter counter={counter}\n                         maxValue={maxValue}\n                         minValue={startValue}\n                         error={errorValue}\n                />\n                <div className=\"buttons\">\n                    <Button title={BUTTONS_TITLES.INC_TITLE} disabled={incButton} execFunc={onIncButtonClick}/>\n                    <Button title={BUTTONS_TITLES.RESET_TITLE} disabled={resetButton} execFunc={onResetButtonClick}/>\n                </div>\n            </div>\n        </div>\n    );\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\n\r\nconst rootReducer = combineReducers({\r\n    counterState: reducer\r\n})\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools());\r\n\r\nexport default store\r\n\r\nexport type AppStoreType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store; // for dev","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./bll/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}