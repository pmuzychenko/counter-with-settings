{"version":3,"sources":["Button.tsx","Settings.tsx","Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","disabled","onClick","execFunc","title","Settings","className","maxValueTitle","type","value","maxValue","onChange","e","changeMaxValue","currentTarget","startValueTitle","minValue","changeMinValue","Counter","error","counter","App","settingsMes","errorMes","useEffect","min","localStorage","getItem","max","current","setMinValue","setMaxValue","setCounter","useState","setError","settingsButtonDisabled","setSettingsButtonDisabled","incDisabled","setIncDisabled","resetDisabled","setResetDisabled","setItem","toString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76b407fe.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\ntype PropsType = {\n    title: string\n    disabled: boolean\n    execFunc: () => void\n}\n\nfunction Button(props: PropsType) {\n    return (\n        <div>\n            <button disabled={props.disabled}\n                    onClick={() => {\n                        props.execFunc()\n                    }}\n            >{props.title}</button>\n        </div>\n    );\n}\n\nexport default Button;\n","import React from 'react';\nimport {ChangeEvent} from 'react';\nimport './App.css';\n\ntype PropsType = {\n    maxValueTitle: string\n    startValueTitle: string\n    maxValue: number\n    minValue: number\n    changeMaxValue: (value: number) => void\n    changeMinValue: (value: number) => void\n}\n\nfunction Settings(props: PropsType) {\n\n    const setMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n        props.changeMaxValue(+e.currentTarget.value)\n    }\n    const setMinValue = (e: ChangeEvent<HTMLInputElement>) => {\n        props.changeMinValue(+e.currentTarget.value)\n    }\n\n\n    return (\n        <div className=\"settings\">\n            <div className={\"maxValue\"}>\n                <span> {props.maxValueTitle} </span>\n                <input type=\"number\" value={props.maxValue}\n                       onChange={setMaxValue}\n\n                />\n            </div>\n            <div className={\"startValue\"}>\n                <span>{props.startValueTitle} </span>\n                <input type=\"number\" value={props.minValue}\n                       onChange={setMinValue}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default Settings;\n","import React from 'react';\nimport './App.css';\n\ntype PropsType = {\n    counter: number\n    minValue: number\n    maxValue: number\n    error: string\n\n}\n\nfunction Counter(props: PropsType) {\n    return (\n        <div className=\"counter\">\n            {props.error ? <h3 className={props.error === 'Incorrect Value!' ? 'error' : 'default'}>{props.error}</h3> :\n                <h3 className={props.counter === props.maxValue ? 'maxNumber' : 'defaultNumber'}>{props.counter}</h3>}\n        </div>\n    );\n}\n\nexport default Counter;\n","import React, {useEffect} from 'react';\nimport {useState} from 'react';\nimport './App.css';\nimport Button from './Button';\nimport Settings from \"./Settings\";\nimport Counter from \"./Counter\";\n\nfunction App() {\n    //Setting global data\n    const maxValueTitle: string = 'max-value:'\n    const startValueTitle: string = 'start-value:'\n    const settingsMes: string = 'Enter values and press SET'\n    const errorMes: string = 'Incorrect Value!'\n    // Using hook useEffect for getting data from local storage\n    useEffect(() => {\n        let min = localStorage.getItem('minValue')\n        let max = localStorage.getItem('maxValue')\n        let current = localStorage.getItem('current')\n        if (min && max && current) {\n            setMinValue(+min)\n            setMaxValue(+max)\n            setCounter(+current)\n        }\n\n    }, [])\n\n    let [error, setError] = useState<string>('')\n    let [maxValue, setMaxValue] = useState<number>(5)\n    let [minValue, setMinValue] = useState<number>(0)\n\n    let [settingsButtonDisabled, setSettingsButtonDisabled] = useState<boolean>(true)\n\n    let [counter, setCounter] = useState<number>(0)\n    let [incDisabled, setIncDisabled] = useState<boolean>(true)\n    let [resetDisabled, setResetDisabled] = useState<boolean>(true)\n    let current = minValue\n    const changeMaxValue = (maxValue: number) => {\n\n        if (maxValue <= minValue) {\n            setError(errorMes)\n            setSettingsButtonDisabled(true)\n        } else {\n            setSettingsButtonDisabled(false)\n            setError(settingsMes)\n        }\n        setMaxValue(maxValue)\n    }\n\n    const changeMinValue = (minValue: number) => {\n        if (minValue < 0 || minValue >= maxValue) {\n            setError(errorMes)\n            setSettingsButtonDisabled(true)\n\n        } else {\n            setSettingsButtonDisabled(false)\n            setError(settingsMes)\n        }\n        setMinValue(minValue)\n    }\n\n    const set = () => {\n        setError('')\n        setSettingsButtonDisabled(true)\n        setCounter(minValue)\n        setIncDisabled(false)\n        setResetDisabled(false)\n\n        // Setting data into local storage\n        localStorage.setItem('minValue', minValue.toString())\n        localStorage.setItem('maxValue', maxValue.toString())\n    }\n\n    const increment = () => {\n        current = counter + 1\n        localStorage.setItem('current', current.toString())\n        setCounter(current)\n\n        if (current === maxValue) {\n            setIncDisabled(true)\n            setResetDisabled(false)\n        }\n    }\n\n    const reset = () => {\n        setCounter(minValue)\n        setIncDisabled(false)\n    }\n\n\n    return (\n        <div className=\"App\">\n            <div className=\"settingsBlock\">\n                <Settings maxValueTitle={maxValueTitle}\n                          startValueTitle={startValueTitle}\n                          maxValue={maxValue}\n                          minValue={minValue}\n                          changeMaxValue={changeMaxValue}\n                          changeMinValue={changeMinValue}\n\n                />\n                <div className=\"buttons\">\n                    <Button title={'set'}\n                            disabled={settingsButtonDisabled}\n                            execFunc={set}\n                    />\n                </div>\n            </div>\n            <div className=\"counterBlock\">\n                <Counter counter={counter}\n                         maxValue={maxValue}\n                         minValue={minValue}\n                         error={error}\n\n                />\n                <div className=\"buttons\">\n                    <Button title={'inc'} disabled={incDisabled} execFunc={increment}/>\n                    <Button title={'reset'} disabled={resetDisabled} execFunc={reset}/>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}